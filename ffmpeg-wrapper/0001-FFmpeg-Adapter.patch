diff --git a/examples/BUILD.gn b/examples/BUILD.gn
index 704afc5467..b5bbf4ec76 100644
--- a/examples/BUILD.gn
+++ b/examples/BUILD.gn
@@ -669,6 +669,19 @@ if (is_linux || is_chromeos || is_win) {
       "peerconnection/client/defaults.h",
       "peerconnection/client/peer_connection_client.cc",
       "peerconnection/client/peer_connection_client.h",
+      "peerconnection/client/ffmpeg/ffmpeg_audio_device_factory.cc",
+      "peerconnection/client/ffmpeg/ffmpeg_audio_device_factory.h",
+      "peerconnection/client/ffmpeg/ffmpeg_audio_device_module.cc",
+      "peerconnection/client/ffmpeg/ffmpeg_audio_device_module.h",
+      "peerconnection/client/ffmpeg/ffmpeg_audio_device.cc",
+      "peerconnection/client/ffmpeg/ffmpeg_audio_device.h",
+      "peerconnection/client/ffmpeg/ffmpeg_vcm_capturer.cc",
+      "peerconnection/client/ffmpeg/ffmpeg_vcm_capturer.h",
+      "peerconnection/client/ffmpeg/ffmpeg_video_capture_module.cc",
+      "peerconnection/client/ffmpeg/ffmpeg_video_capture_module.h",
+      "peerconnection/client/ffmpeg/ffmpeg_video_device_info.cc",
+      "peerconnection/client/ffmpeg/ffmpeg_video_factory.cc",
+      "peerconnection/client/ffmpeg/ffmpeg_video_factory.h"
     ]
 
     deps = [
diff --git a/examples/peerconnection/client/conductor.cc b/examples/peerconnection/client/conductor.cc
index 005a9d6ddf..1d7d15fd49 100644
--- a/examples/peerconnection/client/conductor.cc
+++ b/examples/peerconnection/client/conductor.cc
@@ -45,6 +45,9 @@
 #include "rtc_base/strings/json.h"
 #include "test/vcm_capturer.h"
 
+#include "examples/peerconnection/client/ffmpeg/ffmpeg_audio_device_module.h"
+#include "examples/peerconnection/client/ffmpeg/ffmpeg_vcm_capturer.h"
+
 namespace {
 // Names used for a IceCandidate JSON object.
 const char kCandidateSdpMidName[] = "sdpMid";
@@ -71,50 +74,71 @@ class DummySetSessionDescriptionObserver
 class CapturerTrackSource : public webrtc::VideoTrackSource {
  public:
   static rtc::scoped_refptr<CapturerTrackSource> Create() {
-    const size_t kWidth = 640;
-    const size_t kHeight = 480;
-    const size_t kFps = 30;
-    std::unique_ptr<webrtc::test::VcmCapturer> capturer;
-    std::unique_ptr<webrtc::VideoCaptureModule::DeviceInfo> info(
-        webrtc::VideoCaptureFactory::CreateDeviceInfo());
-    if (!info) {
-      return nullptr;
-    }
-    int num_devices = info->NumberOfDevices();
-    for (int i = 0; i < num_devices; ++i) {
-      capturer = absl::WrapUnique(
-          webrtc::test::VcmCapturer::Create(kWidth, kHeight, kFps, i));
-      if (capturer) {
-        return new rtc::RefCountedObject<CapturerTrackSource>(
-            std::move(capturer));
-      }
+    { // [- THIS CODE USES THE DETECTED HOST'S CAMERA -]
+      // const size_t kWidth = 640;
+      // const size_t kHeight = 480;
+      // const size_t kFps = 30;
+      // std::unique_ptr<webrtc::test::VcmCapturer> capturer;
+      // std::unique_ptr<webrtc::VideoCaptureModule::DeviceInfo> info(
+      //     webrtc::VideoCaptureFactory::CreateDeviceInfo());
+      // if (!info) {
+      //   return nullptr;
+      // }
+      // int num_devices = info->NumberOfDevices();
+      // for (int i = 0; i < num_devices; ++i) {
+      //   capturer = absl::WrapUnique(
+      //       webrtc::test::VcmCapturer::Create(kWidth, kHeight, kFps, i));
+      //   if (capturer) {
+      //     return new rtc::RefCountedObject<CapturerTrackSource>(
+      //         std::move(capturer));
+      //   }
+      // }
+
+      // return nullptr;
     }
 
-    return nullptr;
+    std::unique_ptr<FFmpegVcmCapturer> capturer =
+      absl::WrapUnique(FFmpegVcmCapturer::Create(
+        "/video/url", 1280/*width*/, 720/*height*/, 30/*fps*/));
+    if (capturer)
+      return new rtc::RefCountedObject<CapturerTrackSource>(std::move(capturer));
+    else return nullptr;
   }
 
  protected:
   explicit CapturerTrackSource(
-      std::unique_ptr<webrtc::test::VcmCapturer> capturer)
+      std::unique_ptr<FFmpegVcmCapturer> capturer)
       : VideoTrackSource(/*remote=*/false), capturer_(std::move(capturer)) {}
 
  private:
   rtc::VideoSourceInterface<webrtc::VideoFrame>* source() override {
     return capturer_.get();
   }
-  std::unique_ptr<webrtc::test::VcmCapturer> capturer_;
+  std::unique_ptr<FFmpegVcmCapturer> capturer_;
 };
 
 }  // namespace
 
 Conductor::Conductor(PeerConnectionClient* client, MainWindow* main_wnd)
-    : peer_id_(-1), loopback_(false), client_(client), main_wnd_(main_wnd) {
+: peer_id_(-1),
+  loopback_(false),
+  client_(client),
+  main_wnd_(main_wnd),
+  worker_thread_(rtc::Thread::Create()),
+  task_queue_factory_(webrtc::CreateDefaultTaskQueueFactory())
+{
   client_->RegisterObserver(this);
   main_wnd->RegisterObserver(this);
+
+  // worker_thread_ = rtc::Thread::Create();
+  worker_thread_->SetName("pc_worker_thread", nullptr);
+  worker_thread_->Start();
 }
 
 Conductor::~Conductor() {
   RTC_DCHECK(!peer_connection_);
+  if (worker_thread_)
+    worker_thread_->Stop();
 }
 
 bool Conductor::connection_active() const {
@@ -130,13 +154,26 @@ bool Conductor::InitializePeerConnection() {
   RTC_DCHECK(!peer_connection_factory_);
   RTC_DCHECK(!peer_connection_);
 
+  rtc::scoped_refptr<webrtc::AudioDeviceModule> default_adm(
+    worker_thread_->Invoke<rtc::RefCountedObject<FFmpegAudioDeviceModule>*>(
+      RTC_FROM_HERE,
+      [&]() {
+        return new rtc::RefCountedObject<FFmpegAudioDeviceModule>(
+          task_queue_factory_.get());
+      }
+    )
+  );
+
   peer_connection_factory_ = webrtc::CreatePeerConnectionFactory(
-      nullptr /* network_thread */, nullptr /* worker_thread */,
-      nullptr /* signaling_thread */, nullptr /* default_adm */,
+      nullptr /* network_thread */,
+      worker_thread_.get() /* worker_thread */,
+      nullptr /* signaling_thread */,
+      default_adm /* default_adm */,
       webrtc::CreateBuiltinAudioEncoderFactory(),
       webrtc::CreateBuiltinAudioDecoderFactory(),
       webrtc::CreateBuiltinVideoEncoderFactory(),
-      webrtc::CreateBuiltinVideoDecoderFactory(), nullptr /* audio_mixer */,
+      webrtc::CreateBuiltinVideoDecoderFactory(),
+      nullptr /* audio_mixer */,
       nullptr /* audio_processing */);
 
   if (!peer_connection_factory_) {
diff --git a/examples/peerconnection/client/conductor.h b/examples/peerconnection/client/conductor.h
index 3c06857a05..4cd644c7bd 100644
--- a/examples/peerconnection/client/conductor.h
+++ b/examples/peerconnection/client/conductor.h
@@ -21,6 +21,8 @@
 #include "api/peer_connection_interface.h"
 #include "examples/peerconnection/client/main_wnd.h"
 #include "examples/peerconnection/client/peer_connection_client.h"
+#include "rtc_base/thread.h"
+#include "api/task_queue/default_task_queue_factory.h"
 
 namespace webrtc {
 class VideoCaptureModule;
@@ -129,6 +131,8 @@ class Conductor : public webrtc::PeerConnectionObserver,
   MainWindow* main_wnd_;
   std::deque<std::string*> pending_messages_;
   std::string server_;
+  std::unique_ptr<rtc::Thread> worker_thread_;
+  std::unique_ptr<webrtc::TaskQueueFactory> task_queue_factory_;
 };
 
 #endif  // EXAMPLES_PEERCONNECTION_CLIENT_CONDUCTOR_H_
